CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        # 自定义参数
        textureNoise: { value: white }
        # 透明度
        alphaThreshold: { value: 0.5 }
        # 噪声
        noiseThreshold: {
          value: 0.0,
          editor: {
            min: 0,
            max: 1,
            progress: true,
            step: 0.05
          }
        }
        # 颜色宽度
        colorWidth: {
          value: 0.1,
          editor: {
            min: 0.0,
            max: 0.3,
            progress: true,
            step: 0.02
          }
        }
        # 消融颜色-内
        burnColorInner: {
          value: [1.0, 1.0, 0.0, 1.0],
          editor: {
            type: 'color' 
          }
        }
        # 消融颜色-外
        burnColorOut: {
          value: [1.0, 0.0, 0.0, 1.0],
          editor: {
            type: 'color'
          }
        }
}%


CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif

  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 v_color;
  out vec2 v_uv0;

  #if USE_TEXTURE
    in vec2 a_uv0;
  #endif

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
      v_uv0 = a_uv0;
    #endif

    v_color = a_color;
    v_uv0 = a_texCoord;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
    in vec2 v_uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;
  #endif

  uniform sampler2D textureNoise;
  
  uniform MXD{
    vec4 burnColorInner;
    vec4 burnColorOut;
    float noiseThreshold;
    float colorWidth;
  };

  vec3 lerp(vec3 a, vec3 b, float t){
    return a+(b-a)*t;
  }

  vec4 frag () {
    vec4 noise = vec4(1, 1, 1, 1);

    noise *= CCSampleWithAlphaSeparated(textureNoise, v_uv0*3.0);
    if(noise.r < noiseThreshold){
      discard;
    }

    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0);
    #endif
    
    float t = 1.0 - smoothstep(0.0, colorWidth, noise.r - noiseThreshold);
    vec3 burnColor = lerp(burnColorInner.rgb, burnColorOut.rgb, t);
    // burnColor = pow(burnColor, vec3(2.0));
    o.rgb = lerp(o.rgb, burnColor.rgb,  t*step(0.0001, noiseThreshold ));

    o *= v_color;

    ALPHA_TEST(o);

    return o;
  }
}%